---
import JobSearch from "./JobSearch.astro";
import { formatSalary } from "@/utils/formatters";
const { jobs } = Astro.props;

const formatDate = (date) => {
  return new Date(date).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
};
---

<div>
  <!-- Search Input -->
  <div class="lg:-mt-24 mx-auto md:px-32 py-6 max-w-7xl">
    <div class="mx-auto rounded-2xl p-4 lg:p-8 mt-4 bg-white/20 backdrop-blur-xl shadow-2xl shadow-slate-500/40">
      <div class="relative">
        <input
          id="searchInput"
          class="w-full px-4 py-3 rounded-lg text-sm text-slate-600 bg-white border-0 ring-1 ring-slate-200 focus:ring-2 focus:ring-blue-500 shadow-sm"
          type="text"
          placeholder="Search jobs by Title, Location, Industry, Role, or Keywords..."
          aria-label="Search"
        />
        <button 
          id="resetButton" 
          class="absolute right-3 top-1/2 -translate-y-1/2 text-sm font-medium text-slate-400 hover:text-blue-600 hidden"
        >
          Clear
        </button>
      </div>
    </div>
  </div>

  <div class="pt-12 mb-24">
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Job Listings -->
      <div class="lg:w-2/3 space-y-6">
        {jobs.map((job) => (
          <div class="job-item" 
            data-position={job.data.position}
            data-location={job.data.location}
            data-team={job.data.team}
            data-occupation={job.data.occupationalCategory}
            data-salary={job.data.salary.value}
            data-city={job.data.address.city}
            data-region={job.data.address.region}
            data-company={job.data.companyDetails.name}>
            <a href={`/jobs/${job.slug}`} class="block group">
              <div class="bg-white p-6 rounded-xl shadow-sm border border-slate-200 hover:border-blue-100 hover:shadow-md transition duration-200">
                <div class="flex justify-between items-center mb-1">
                  <p class="text-base font-semibold text-slate-500 mb-1">{job.data.companyDetails.name}</p>
                  <span class="text-xs font-medium text-blue-600 bg-blue-50 px-3 py-1 rounded-full">NEW</span>
                </div>

                <div class="flex justify-between items-center mb-1">
                  <h3 class="text-lg font-semibold text-blue-600 group-hover:text-blue-700">{job.data.position}</h3>
                </div>            
                
                <div class="flex justify-start items-center mb-1 gap-1 flex-wrap">
                  <p class="text-sm text-slate-500">
                    <span class="text-slate-500">{job.data.location}</span>
                  </p>
                  <span class="text-slate-500">-</span>
                  <p class="text-sm text-slate-500">{formatSalary(job.data.salary)}</p>
                  <span class="text-slate-500">-</span>
                  <p class="text-sm text-slate-500">Posted {formatDate(job.data.datePosted)}</p>
                </div>
                
                <p class="text-sm text-slate-500 line-clamp-2 mb-4">{job.data.description}</p>

                <div class="flex justify-end">
                    <p class="text-sm font-semibold text-blue-600 line-clamp-2">Easy Apply</p>

                 
                </div>
              </div>
            </a>
          </div>
        ))}
      </div>

      <!-- Right Sidebar -->
      <div class="lg:w-1/3">
        <div class="lg:sticky lg:top-8 bg-white p-6 rounded-xl shadow-sm border border-slate-200">
          <div class="text-center">
            <h3 class="text-xl font-semibold text-purple-900 mb-3">
              Tustin Recruiting
            </h3>
            <p class="text-sm text-slate-500 mb-6">
              Looking to hire? Our team of expert recruiters can help you find the perfect candidates for your open positions.
            </p>
            <div class="space-y-3">
              <a
                href="/contact"
                class="text-white w-full items-center font-medium gap-3 inline-flex focus-visible:outline-2 focus-visible:outline-offset-2 focus:outline-none justify-center px-6 ring-2 ring-transparent focus:ring-offset-2 focus:ring-blue-500 duration-200 py-2.5 rounded-full active:bg-blue-800 active:text-white bg-blue-500 hover:bg-blue-600"
              >
                Contact Us
              </a>
              <a
                href="/about"
                class="text-blue-600 w-full items-center font-medium gap-3 inline-flex focus-visible:outline-2 focus-visible:outline-offset-2 focus:outline-none justify-center px-6 ring-2 ring-transparent focus:ring-offset-2 focus:ring-blue-500 duration-200 py-2.5 rounded-full active:bg-blue-800 active:text-white bg-blue-50 hover:bg-blue-100"
              >
                Post a Job
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let searchTerm = '';

  function filterJobs() {
    const jobItems = document.querySelectorAll('.job-item');
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const resetButton = document.getElementById('resetButton');
    
    searchTerm = searchInput.value.toLowerCase();
    
    if (resetButton) {
      resetButton.style.display = searchTerm.length >= 2 ? 'block' : 'none';
    }

    jobItems.forEach(item => {
      if (!(item instanceof HTMLElement)) return;
      
      if (searchTerm.length < 2) {
        item.style.display = '';
        return;
      }

      // Check if search term is a number (potential salary search)
      const salarySearch = parseInt(searchTerm.replace(/[^0-9]/g, ''));
      const jobSalary = parseInt(item.dataset.salary || '0');

      // If it's a salary search, show jobs with salary greater than or equal to search value
      if (!isNaN(salarySearch) && jobSalary >= salarySearch) {
        item.style.display = '';
        return;
      }

      // Create searchable content from specific frontmatter fields
      const searchableContent = [
        item.dataset.position,
        item.dataset.location,
        item.dataset.team,
        item.dataset.occupation,
        item.dataset.city,
        item.dataset.region,
        item.dataset.company
      ]
        .filter(Boolean)
        .join(' ')
        .toLowerCase();

      item.style.display = searchableContent.includes(searchTerm) ? '' : 'none';
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const resetButton = document.getElementById('resetButton');

    searchInput?.addEventListener('input', filterJobs);

    resetButton?.addEventListener('click', () => {
      if (searchInput instanceof HTMLInputElement) {
        searchInput.value = '';
        filterJobs();
      }
    });
  });
</script>